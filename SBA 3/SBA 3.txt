1. Implement an ArrayDequeue and all of its methods such as add(),
addFirst(), addLast(), element(), poll(), push(), remove.

package day20;
import java.util.*;
public class ArrayDequeDemo {
	public static void main(String[] args) {
		// initializing a deque
		Deque<String> dq=new ArrayDeque<String>();
		dq.add("to");
		dq.addFirst("WELCOME");
		dq.addLast("java");
		System.out.println(dq);
		System.out.println(dq.element());
		System.out.println(dq.poll());
		dq.push("amazing");
		System.out.println(dq);
		dq.remove();
		System.out.println(dq);
	}

}
OUTPUT:
[WELCOME, to, java]
WELCOME
WELCOME
[amazing, to, java]
[to, java]

2. Implement a PriorityQueue and use all the methods.
package day19;
// prints based on priorities.does not allow null values to be stored
import java.util.*;
public class PriorityQueueExample {

	public static void main(String[] args) {
		PriorityQueue <String> pq=new PriorityQueue<>();
		pq.add("ajay");
		pq.add("vijay");
		pq.add("raj");
		pq.add("gagan");
		System.out.println("head:"+pq.element()); // returns 1st element
		System.out.println("head:"+pq.peek());  // returns 1st element
		System.out.println("iterating queue elements");
		Iterator itr=pq.iterator();
		while(itr.hasNext()) {
			System.out.println(itr.next());
		}
		pq.remove(); // deletes head element
		pq.poll(); // removes head
		System.out.println("after removing 2 elements");
		Iterator itr2=pq.iterator();
		while(itr2.hasNext()){
			System.out.println(itr2.next());
			
		}
		
	}

}
OUTPUT:
head:ajay
head:ajay
iterating queue elements
ajay
gagan
raj
vijay
after removing 2 elements
raj
vijay

3. Implement a Stack and all of its methods peek(), push(), pop(), and to
determine the size of the stack.
package day18;
import java.util.Stack;
public class StackInbuiltMethodsAssignment {

	public static void main(String[] args) {
		Stack<String> animal=new Stack<String>();
		animal.push("dog");
		animal.push("cat");
		animal.push("tiger");
		animal.push("lion");
		animal.push("bear");
		animal.push("panda");
		System.out.println("stack:"+animal);
		animal.pop();
		animal.pop();
		System.out.println("stack:"+animal);
		String top=animal.peek();
		System.out.println("topmost element of stack:"+top);
		boolean result=animal.empty();
		System.out.println("is stack empty:"+result);
		System.out.println("stack size:"+animal.size());
		int location=animal.search("tiger");
		System.out.println("tiger is present at position:"+location);
	}

}
OUTPUT:
stack:[dog, cat, tiger, lion, bear, panda]
stack:[dog, cat, tiger, lion]
topmost element of stack:lion
is stack empty:false
stack size:4
tiger is present at position:2

4. Write a program to implement insertion sort.
package day18;

// java program for implementing insertion sort 

public class InsertionSort {
	void sort(int [] arr) {
		int n=arr.length;
		for(int i=1;i<n;i++) {
			int key=arr[i];
			int j=i-1;
			while(j>=0 && arr[j]>key) {
				arr[j+1]=arr[j];
				j=j-1;
			}
			arr[j+1]=key;
		}
	}
	static void printarray(int[] arr) {
		int n=arr.length;
		for(int i=0;i<n;i++) {
			System.out.println(arr[i]+" ");
		}
			
	}

	public static void main(String[] args) {
		int arr[]= {12,11,13,5,6};
		InsertionSort i=new InsertionSort();
		i.sort(arr);
		System.out.println("sorted array......");
		printarray(arr);
		
	}

}
OUTPUT:
sorted array......
5 
6 
11 
12 
13 

